from machine import I2C

class SH1107:
    BasicFont = [
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00],
        [0x00, 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00, 0x00],
        [0x00, 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00, 0x00],
        [0x00, 0x23, 0x13, 0x08, 0x64, 0x62, 0x00, 0x00],
        [0x00, 0x36, 0x49, 0x55, 0x22, 0x50, 0x00, 0x00],
        [0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x1C, 0x22, 0x41, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x41, 0x22, 0x1C, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x08, 0x2A, 0x1C, 0x2A, 0x08, 0x00, 0x00],
        [0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00],
        [0x00, 0xA0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00],
        [0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00],
        [0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00, 0x00],
        [0x00, 0x00, 0x42, 0x7F, 0x40, 0x00, 0x00, 0x00],
        [0x00, 0x62, 0x51, 0x49, 0x49, 0x46, 0x00, 0x00],
        [0x00, 0x22, 0x41, 0x49, 0x49, 0x36, 0x00, 0x00],
        [0x00, 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00, 0x00],
        [0x00, 0x27, 0x45, 0x45, 0x45, 0x39, 0x00, 0x00],
        [0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00, 0x00],
        [0x00, 0x01, 0x71, 0x09, 0x05, 0x03, 0x00, 0x00],
        [0x00, 0x36, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00],
        [0x00, 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00, 0x00],
        [0x00, 0x00, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x00, 0xAC, 0x6C, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00],
        [0x00, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00],
        [0x00, 0x41, 0x22, 0x14, 0x08, 0x00, 0x00, 0x00],
        [0x00, 0x02, 0x01, 0x51, 0x09, 0x06, 0x00, 0x00],
        [0x00, 0x32, 0x49, 0x79, 0x41, 0x3E, 0x00, 0x00],
        [0x00, 0x7E, 0x09, 0x09, 0x09, 0x7E, 0x00, 0x00],
        [0x00, 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00],
        [0x00, 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00, 0x00],
        [0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C, 0x00, 0x00],
        [0x00, 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00, 0x00],
        [0x00, 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00, 0x00],
        [0x00, 0x3E, 0x41, 0x41, 0x51, 0x72, 0x00, 0x00],
        [0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00, 0x00],
        [0x00, 0x41, 0x7F, 0x41, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00, 0x00],
        [0x00, 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00],
        [0x00, 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00],
        [0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00, 0x00],
        [0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00, 0x00],
        [0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00, 0x00],
        [0x00, 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00, 0x00],
        [0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00, 0x00],
        [0x00, 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00, 0x00],
        [0x00, 0x26, 0x49, 0x49, 0x49, 0x32, 0x00, 0x00],
        [0x00, 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00, 0x00],
        [0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00, 0x00],
        [0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00, 0x00],
        [0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F, 0x00, 0x00],
        [0x00, 0x63, 0x14, 0x08, 0x14, 0x63, 0x00, 0x00],
        [0x00, 0x03, 0x04, 0x78, 0x04, 0x03, 0x00, 0x00],
        [0x00, 0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x00],
        [0x00, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00],
        [0x00, 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x04, 0x02, 0x01, 0x02, 0x04, 0x00, 0x00],
        [0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00],
        [0x00, 0x01, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x20, 0x54, 0x54, 0x54, 0x78, 0x00, 0x00],
        [0x00, 0x7F, 0x48, 0x44, 0x44, 0x38, 0x00, 0x00],
        [0x00, 0x38, 0x44, 0x44, 0x28, 0x00, 0x00, 0x00],
        [0x00, 0x38, 0x44, 0x44, 0x48, 0x7F, 0x00, 0x00],
        [0x00, 0x38, 0x54, 0x54, 0x54, 0x18, 0x00, 0x00],
        [0x00, 0x08, 0x7E, 0x09, 0x02, 0x00, 0x00, 0x00],
        [0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C, 0x00, 0x00],
        [0x00, 0x7F, 0x08, 0x04, 0x04, 0x78, 0x00, 0x00],
        [0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x80, 0x84, 0x7D, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00],
        [0x00, 0x41, 0x7F, 0x40, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x7C, 0x04, 0x18, 0x04, 0x78, 0x00, 0x00],
        [0x00, 0x7C, 0x08, 0x04, 0x7C, 0x00, 0x00, 0x00],
        [0x00, 0x38, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00],
        [0x00, 0xFC, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00],
        [0x00, 0x18, 0x24, 0x24, 0xFC, 0x00, 0x00, 0x00],
        [0x00, 0x00, 0x7C, 0x08, 0x04, 0x00, 0x00, 0x00],
        [0x00, 0x48, 0x54, 0x54, 0x24, 0x00, 0x00, 0x00],
        [0x00, 0x04, 0x7F, 0x44, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x3C, 0x40, 0x40, 0x7C, 0x00, 0x00, 0x00],
        [0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00, 0x00],
        [0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00, 0x00],
        [0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00],
        [0x00, 0x1C, 0xA0, 0xA0, 0x7C, 0x00, 0x00, 0x00],
        [0x00, 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00, 0x00],
        [0x00, 0x08, 0x36, 0x41, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00],
        [0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00],
        [0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00]
    ]

    def __init__(self, i2c, address=0x3c):
        self.address = address
        self.i2c = i2c

    def sendCommand(self, cmd):
        b = bytearray(2)
        b[0] = 0x80
        b[1] = cmd
        self.i2c.writeto(self.address, b)

    def sendData(self, data):
        c = bytearray(2)
        c[0] = 0x40
        c[1] = data
        self.i2c.writeto(self.address, c)

    def on(self):
        self.sendCommand(0xaf)

    def off(self):
        self.sendCommand(0xae)

    def inverseDisplay(self):
        self.sendCommand(0xA7)

    def normalDisplay(self):
        self.sendCommand(0xA6)

    def horizontalMode(self):
        self.sendCommand(0xA0)
        self.sendCommand(0xC8)

    def verticalMode(self):
        self.sendCommand(0xA0)
        self.sendCommand(0xC0)

    def activateScroll(self):
        self.sendCommand(0x2F)

    def deactivateScroll(self):
        self.sendCommand(0x2E)

    def contrastLevel(self, level):
        self.sendCommand(0x81)
        self.sendCommand(level)

    def drawBitmap(self, arr, len):
        Row = 0
        column_l = 0x00
        column_h = 0x10
        self.horizontalMode()
        for x in range(len):
            self.sendCommand(0xb0 + Row)
            self.sendCommand(column_l)
            self.sendCommand(column_h)
            bits = arr[x]
            tmp = 0x00
            for b in range(8):
                tmp |= ((bits >> (7 - b)) & 0x01) << b
            self.sendData(tmp)
            Row = Row + 1
            if Row >= 16:
                Row = 0
                column_l = column_l + 1
                if column_l >= 16:
                    column_l = 0x00
                    column_h += 0x01

    def string(self, S):
        for c in S:
            self.char(ord(c))

    def char(self, C):
        if C < 32 or C > 127:
            C = 32
        for x in range(8):
            self.sendData(self.BasicFont[C - 32][x])

    def textXY(self, row, column):
        self.sendCommand(0xb0 + (row & 0x0F))  # set page/row
        self.sendCommand(0x10 + ((column >> 4) & 0x07)
                         )  # set column high 3 byte
        self.sendCommand(column & 0x0F)  # set column low 4 byte

    def clearDisplay(self):
        for x in range(16):
            self.sendCommand(0xb0 + x)
            self.sendCommand(0x0)
            self.sendCommand(0x10)
            for y in range(128):
                self.sendData(0x00)

    def init(self):
        self.sendCommand(0xae)  # Display OFF
        self.sendCommand(0xd5)  # Set Dclk
        self.sendCommand(0x50)  # 100Hz
        self.sendCommand(0x20)  # Set row address
        self.sendCommand(0x81)  # Set contrast control
        self.sendCommand(0x80)
        self.sendCommand(0xa0)  # Segment remap
        self.sendCommand(0xa4)  # Set Entire Display ON
        self.sendCommand(0xa6)  # Normal display
        self.sendCommand(0xad)  # Set external VCC
        self.sendCommand(0x80)
        self.sendCommand(0xc0)  # Set Common scan direction
        self.sendCommand(0xd9)  # Set phase leghth
        self.sendCommand(0x1f)
        self.sendCommand(0xdb)  # Set Vcomh voltage
        self.sendCommand(0x27)
        self.sendCommand(0xaf)  # Display ON
        self.sendCommand(0xb0)
        self.sendCommand(0x00)
        self.sendCommand(0x11)
